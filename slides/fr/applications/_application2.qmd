
:::{.nonincremental}
:::: {.callout-tip collapse="true" icon=false}
## Partie 1 : Utilisation d'un mod√®le personnalis√©

1. Tous les scripts li√©s √† notre mod√®le personnalis√© sont stock√©s dans le dossier `src`. Consultez-les. En particulier, le script `train.py` est responsable de l'entra√Ænement du mod√®le. Quelles sont les principales diff√©rences avec l'application 1 ?
2. Pourquoi pouvons-nous dire que le mod√®le `MLflow` int√®gre le *preprocessing* ?
::::
:::




## Application 2 {.scrollable}

:::{.nonincremental}
::::{.callout-tip collapse="true" icon=false}
## Partie 2 : Des notebooks √† un projet de type package

1. Le script `train.py` est √©galement responsable du *logging* des exp√©rimentations dans `MLFlow`. Notez la mani√®re dont les param√®tres de chaque exp√©rimentation vont √™tre pass√©s √† la fonction d'entra√Ænement √† l'appel du script.

2. Afin de rendre la proc√©dure d'entra√Ænement d'un mod√®le plus reproductible, `MLFlow` met √† disposition la commande `mlflow run`. Le fichier `MLproject` sp√©cifie la commande et les param√®tres qui vont lui √™tre pass√©es. Inspectez ce fichier.

3. Ex√©cutez un entra√Ænement du mod√®le √† l'aide de `MLFlow`. Pour ce faire, ouvrez un terminal ({{< iconify ph list-bold >}} `-> Terminal -> New Terminal`) et ex√©cutez la commande suivante :

   ```sh
   export MLFLOW_EXPERIMENT_NAME="nace-prediction"
   mlflow run ~/work/formation-mlops/ --env-manager=local \
       -P remote_server_uri=$MLFLOW_TRACKING_URI \
       -P experiment_name=$MLFLOW_EXPERIMENT_NAME
   ```

4. Dans l'interface de `MLflow`, examinez les r√©sultats de votre ex√©cution pr√©c√©dente :

   * `Experiments -> nace-prediction -> <nom_run>`

5. Vous avez entra√Æn√© le mod√®le avec certains param√®tres par d√©faut. Dans le fichier `MLproject`, v√©rifiez les param√®tres disponibles. R√©-entra√Ænez un mod√®le avec diff√©rents param√®tres (par exemple, `dim = 25`).

<details> 
<summary> 
    <font size=\"3\" color=\"darkgreen\"><b>Cliquez pour voir la commande </b></font> 
</summary>

```sh
mlflow run ~/work/formation-mlops/ --env-manager=local \
    -P remote_server_uri=$MLFLOW_TRACKING_URI \
    -P experiment_name=$MLFLOW_EXPERIMENT_NAME \
    -P dim=25
```

</details>


6. Dans `MLflow`, comparez les 2 mod√®les en tra√ßant la m√©trique *accuracy* par rapport √† un param√®tre que vous avez modifi√© (par exemple `dim`)
   * `S√©lectionnez les 2 exp√©riences -> Compare -> Scatter Plot -> Select your X and Y axis` 

7. Enregistrez le mod√®le avec la meilleure *accuracy* en tant que `fasttext` pour le rendre facilement interrogeable depuis `Python`.

::::
:::




## Application 2 {.scrollable}

:::{.nonincremental}
::::{.callout-tip collapse="true" icon=false}
## Partie 3 : Requ√™tage du mod√®le entra√Æn√© en local

1. Cr√©ez un script `predict_mlflow.py` dans le dossier `src` du projet. Ce script doit : 
    a. Charger la version 1 du mod√®le `fasttext` 
    b. Utiliser le mod√®le pour pr√©dire les codes NACE d'une liste donn√©e de descriptions d'activit√© (par exemple, `["vendeur d'huitres", "boulanger"]`).

üí° N'oubliez pas de lire la documentation de la fonction `predict()` de la classe personnalis√©e (`src/fasttext_wrapper.py`) pour comprendre le format attendu des entr√©es !

    
<details> 
<summary> 
    <font size=\"3\" color=\"darkgreen\"><b>Cliquez pour voir le contenu du script </b></font> 
</summary>

```{.python filename="predict_mlflow.py"}
import mlflow

model_name = "fasttext"
version = 1

model = mlflow.pyfunc.load_model(
    model_uri=f"models:/{model_name}/{version}"
)

list_libs = ["vendeur d'huitres", "boulanger"]

results = model.predict(list_libs, params={"k": 1})
print(results)
```
</details>

3. Ex√©cutez votre script `predict_mlflow.py`.

<details> 
<summary> 
    <font size=\"3\" color=\"darkgreen\"><b>Cliquez pour voir la commande </b></font> 
</summary>

```shell
python formation-mlops/src/predict_mlflow.py
```

</details>

4. Assurez-vous que les deux descriptions suivantes donnent la m√™me pr√©diction principale : `"COIFFEUR"` et `"coiffeur, & 98789"`.
5. Modifiez la valeur du param√®tre `k` et essayez de comprendre comment la structure de la sortie a chang√© en cons√©quence.
::::
:::
